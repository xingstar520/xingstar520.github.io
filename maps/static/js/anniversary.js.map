{"version":3,"file":"../../../static/js/anniversary.js","names":["initializeAnniversary","LunarDate","Year","Month","Day","solar","Lunar","fromYmdHms","getSolar","Date","getYear","getMonth","getDay","error","daysBetween","date1","date2","Math","floor","targetOrStartDate","dateStr","isLunar","displayMode","split","map","Number","anniversaryDate","now","getFullYear","getDate","weekDay","toLocaleDateString","weekday","toString","padStart","targetDate","updateElapsedDisplay","elem","displayState","days","startDate","totalDays","textContent","nextElementSibling","weeks","weeksAndDaysBetween","months","years","monthsAndDaysBetween","document","querySelectorAll","forEach","getAttribute","hasAttribute","dataset","addEventListener","currentState","parseInt","daysText","daysLeft"],"sources":["static/js/anniversary.js"],"mappings":"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","ignoreList":[],"sourcesContent":["// anniversary.js\n\nfunction initializeAnniversary() {\n    function LunarDate(Year, Month, Day) {\n        try {\n            let solar = Lunar.fromYmdHms(Year, Month, Day, 0, 0, 0).getSolar();\n            return new Date(solar.getYear(), solar.getMonth() - 1, solar.getDay());\n        } catch (error) {\n            return LunarDate(Year, Month, Day - 1);\n        }\n    }\n\n    // 计算两个日期之间的天数差\n    function daysBetween(date1, date2) {\n        const oneDay = 24 * 60 * 60 * 1000;\n        return Math.floor((date2 - date1) / oneDay);\n    }\n\n    // 计算两个日期之间的周数和天数差\n    function weeksAndDaysBetween(date1, date2) {\n        const totalDays = daysBetween(date1, date2);\n        const weeks = Math.floor(totalDays / 7);\n        const days = totalDays % 7;\n        return { weeks, days };\n    }\n\n    // 计算两个日期之间的月数和天数差\n    function monthsAndDaysBetween(date1, date2) {\n        let years = date2.getFullYear() - date1.getFullYear();\n        let months = date2.getMonth() - date1.getMonth() + years * 12;\n        let days = date2.getDate() - date1.getDate();\n\n        if (days < 0) {\n            months -= 1;\n            let previousMonth = new Date(date2.getFullYear(), date2.getMonth(), 0);\n            days += previousMonth.getDate();\n        }\n\n        return { months, days };\n    }\n\n    // 剩余天数\n    function daysLeft(dateStr, isLunar) {\n        const [Year, Month, Day] = dateStr.split(\"-\").map(Number);\n        let now = new Date();\n        now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        let anniversaryDate;\n        if (isLunar) {\n            anniversaryDate = LunarDate(now.getFullYear(), Month, Day);\n            if (anniversaryDate < now) {\n                anniversaryDate = LunarDate(now.getFullYear() + 1, Month, Day);\n            }\n        } else {\n            anniversaryDate = new Date(now.getFullYear(), Month - 1, Day);\n            if (anniversaryDate < now) {\n                anniversaryDate = new Date(now.getFullYear() + 1, Month - 1, Day);\n            }\n        }\n        return daysBetween(now, anniversaryDate);\n    }\n\n    // 已经过的天数\n    function totalDays(dateStr, isLunar) {\n        const [Year, Month, Day] = dateStr.split(\"-\").map(Number);\n        let now = new Date();\n        now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        let startDate;\n        if (isLunar) {\n            startDate = LunarDate(Year, Month, Day);\n        } else {\n            startDate = new Date(Year, Month - 1, Day);\n        }\n        return daysBetween(startDate, now);\n    }\n\n    // 返回目标或起始日期以及星期几\n    function targetDate(dateStr, isLunar) {\n        const [Year, Month, Day] = dateStr.split(\"-\").map(Number);\n        let now = new Date();\n        now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        let anniversaryDate;\n        if (isLunar) {\n            anniversaryDate = LunarDate(now.getFullYear(), Month, Day);\n            if (anniversaryDate < now) {\n                anniversaryDate = LunarDate(now.getFullYear() + 1, Month, Day);\n            }\n        } else {\n            anniversaryDate = new Date(now.getFullYear(), Month - 1, Day);\n            if (anniversaryDate < now) {\n                anniversaryDate = new Date(now.getFullYear() + 1, Month - 1, Day);\n            }\n        }\n\n        // 获取星期几\n        const weekDay = anniversaryDate.toLocaleDateString('zh-CN', { weekday: 'long' });\n\n        // 返回年月日加星期几\n        const year = anniversaryDate.getFullYear();\n        const month = (anniversaryDate.getMonth() + 1).toString().padStart(2, '0');\n        const day = anniversaryDate.getDate().toString().padStart(2, '0');\n        return `${year}-${month}-${day} (${weekDay})`;\n    }\n\n    // 返回目标或起始日期（根据 displayMode）\n    function targetOrStartDate(dateStr, isLunar, displayMode) {\n        if (displayMode === \"elapsed\") {\n            return dateStr; // 如果是 elapsed 模式，直接返回配置的日期（起始日）\n        } else {\n            return targetDate(dateStr, isLunar); // 否则，显示目标日期和星期几\n        }\n    }\n\n    const countdownElements = document.querySelectorAll(\".countdown\");\n\n    countdownElements.forEach(function (elem) {\n        const dateStr = elem.getAttribute(\"data-date\");\n        const isLunar = elem.hasAttribute(\"data-lunar\");\n        const displayMode = elem.getAttribute(\"data-display-mode\");\n\n        if (displayMode === \"elapsed\") {\n            // 初始化显示状态为0（天数）\n            elem.dataset.displayState = '0';\n            // 更新显示\n            updateElapsedDisplay(elem, dateStr, isLunar, 0);\n            // 添加点击事件监听器\n            elem.addEventListener('click', function () {\n                let currentState = parseInt(elem.dataset.displayState);\n                currentState = (currentState + 1) % 3; // 在 0、1、2 之间循环\n                elem.dataset.displayState = currentState.toString();\n                updateElapsedDisplay(elem, dateStr, isLunar, currentState);\n            });\n        } else {\n            // 显示剩余天数\n            let daysText = daysLeft(dateStr, isLunar);\n            elem.textContent = daysText;\n            elem.nextElementSibling.textContent = \"天后\";\n        }\n    });\n\n    // 更新 elapsed 模式下的显示内容\n    function updateElapsedDisplay(elem, dateStr, isLunar, displayState) {\n        if (displayState === 0) {\n            // 显示已经过去的天数\n            let days = totalDays(dateStr, isLunar);\n            elem.textContent = days;\n            elem.nextElementSibling.textContent = \"天了\";\n        } else if (displayState === 1) {\n            // 显示已经过去的周数和天数\n            const [Year, Month, Day] = dateStr.split(\"-\").map(Number);\n            let now = new Date();\n            now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            let startDate;\n            if (isLunar) {\n                startDate = LunarDate(Year, Month, Day);\n            } else {\n                startDate = new Date(Year, Month - 1, Day);\n            }\n\n            let { weeks, days } = weeksAndDaysBetween(startDate, now);\n            if (days === 0) {\n                elem.textContent = weeks;\n                elem.nextElementSibling.textContent = \"周了\";\n            } else {\n                elem.textContent = `${weeks}周${days}天`;\n                elem.nextElementSibling.textContent = \"已\";\n            }\n        } else if (displayState === 2) {\n            // 显示已经过去的月数和天数\n            const [Year, Month, Day] = dateStr.split(\"-\").map(Number);\n            let now = new Date();\n            now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            let startDate;\n            if (isLunar) {\n                startDate = LunarDate(Year, Month, Day);\n            } else {\n                startDate = new Date(Year, Month - 1, Day);\n            }\n\n            let { months, days } = monthsAndDaysBetween(startDate, now);\n            elem.textContent = `${months}月${days}天`;\n            elem.nextElementSibling.textContent = \"已\";\n        }\n    }\n\n    // 显示目标或起始日期\n    const targetDateElements = document.querySelectorAll(\".target-date\");\n    targetDateElements.forEach(function (elem) {\n        const dateStr = elem.getAttribute(\"data-date\");\n        const isLunar = elem.hasAttribute(\"data-lunar\");\n        const displayMode = elem.getAttribute(\"data-display-mode\");\n        elem.textContent = targetOrStartDate(dateStr, isLunar, displayMode);\n    });\n}\n\n// 初始化页面加载\ndocument.addEventListener(\"DOMContentLoaded\", initializeAnniversary);\n\n// 兼容 pjax\ndocument.addEventListener(\"pjax:complete\", initializeAnniversary);\n"]}